package awais.instagrabber.customviews.emoji;

/*
 * Copyright (C) 2016 - Niklas Baudy, Ruben Gees, Mario Đanić and contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.PixelFormat;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.text.Spanned;
import android.text.TextPaint;

import androidx.annotation.NonNull;
import androidx.emoji.text.EmojiCompat;
import androidx.emoji.text.EmojiSpan;

/**
 * An emoji drawable backed by a span generated by the Google emoji support library.
 */
final class GoogleCompatEmojiDrawable extends Drawable {
    private static final String TAG = GoogleCompatEmojiDrawable.class.getSimpleName();
    private static final float TEXT_SIZE_FACTOR = 0.8f;
    private static final float BASELINE_OFFSET_FACTOR = 0.225f;

    private EmojiSpan emojiSpan;
    private boolean processed;
    private CharSequence emojiCharSequence;
    private final TextPaint textPaint = new TextPaint();

    GoogleCompatEmojiDrawable(@NonNull String unicode) {
        this.emojiCharSequence = unicode;
        this.textPaint.setStyle(Paint.Style.FILL);
        this.textPaint.setColor(0x0ffffffff);
        this.textPaint.setAntiAlias(true);
    }

    private void process() {
        this.emojiCharSequence = EmojiCompat.get().process(this.emojiCharSequence);
        if (this.emojiCharSequence instanceof Spanned) {
            Object[] spans = ((Spanned) this.emojiCharSequence).getSpans(0, this.emojiCharSequence.length(), EmojiSpan.class);
            if (spans.length > 0) {
                this.emojiSpan = (EmojiSpan) spans[0];
            }
        }
    }

    @Override
    public void draw(@NonNull Canvas canvas) {
        Rect bounds = this.getBounds();
        this.textPaint.setTextSize(bounds.height() * GoogleCompatEmojiDrawable.TEXT_SIZE_FACTOR);
        int y = Math.round(bounds.bottom - bounds.height() * GoogleCompatEmojiDrawable.BASELINE_OFFSET_FACTOR);

        if (!this.processed && EmojiCompat.get().getLoadState() != EmojiCompat.LOAD_STATE_LOADING) {
            this.processed = true;
            if (EmojiCompat.get().getLoadState() != EmojiCompat.LOAD_STATE_FAILED) {
                this.process();
            }
        }

        if (this.emojiSpan == null) {
            canvas.drawText(this.emojiCharSequence, 0, this.emojiCharSequence.length(), bounds.left, y, this.textPaint);
        } else {
            this.emojiSpan.draw(canvas, this.emojiCharSequence, 0, this.emojiCharSequence.length(), bounds.left, bounds.top, y, bounds.bottom, this.textPaint);
        }
    }

    @Override
    public void setAlpha(int alpha) {
        this.textPaint.setAlpha(alpha);
    }

    @Override
    public void setColorFilter(ColorFilter colorFilter) {
        this.textPaint.setColorFilter(colorFilter);
    }

    @Override
    public int getOpacity() {
        return PixelFormat.UNKNOWN;
    }
}

